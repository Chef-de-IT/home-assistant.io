---
title: Shelly
description: Integrate Shelly devices
ha_category:
  - Binary Sensor
  - Cover
  - Energy
  - Light
  - Number
  - Sensor
  - Switch
  - Update
ha_release: 0.115
ha_codeowners:
  - '@balloob'
  - '@bieniu'
  - '@thecode'
  - '@chemelli74'
  - '@bdraco'
ha_iot_class: Local Push
ha_domain: shelly
featured: true
ha_config_flow: true
ha_zeroconf: true
ha_platforms:
  - binary_sensor
  - button
  - climate
  - cover
  - diagnostics
  - light
  - number
  - sensor
  - switch
  - update
ha_integration_type: device
ha_quality_scale: platinum
---

Integrate [Shelly devices](https://shelly.cloud) into Home Assistant.

{% include integrations/config_flow.md %}

## Shelly device generations

There are two generations of Shelly devices, and this integration supports both. In Home Assistant UI, on each Shelly device's page, **Device info** section will state `Hardware: gen1` or `Hardware: gen2`. There are differences in how gen1 vs. gen2 devices should be configured, and in the naming of entities and devices.

<div class="note">Shelly cloud connection is not required for this integration to work. Shelly devices are communicating directly with Home Assistant server.</div>


## Configuring 1st generaton Shelly devices

First generation Shelly devices use the `CoIoT` protocol to communicate with the HA integration. Home Assistant will display a repair issue for any such Shelly device, if push updates from it do not reach the Home Assistant server. To fix:

1. Ensure the Shelly device is on the current firmware. Older firmware will lack the necessary setting;
2. In the device's web UI (at the local IP address of your Shelly device), go to: **Internet & Security** >> **ADVANCED - DEVELOPER SETTINGS**;
3. Make sure box **Enable CoIoT** is selected;
4. In **CoIoT peer** field, enter `Your_Home_Assistant_local_IP_address:5683`
5. **Save**;
6. Reboot the Shelly device.

If you have followed the above steps, but the HA repair issue remains, there are diagnostic steps and ideas listed in the **Known issues and limitations** section at the bottom of this document.


## Configuring 2nd generation Shelly devices

Second generation Shelly devices use the `RPC` protocol to communicate with the integration. _Battery powered gen. 2 devices **only**_ need manual outbound WebSocket configuration:

1. Ensure the Shelly device is on the current firmware. Older firmware will lack the necessary setting;
2. In the device's web UI (at the local IP address of your Shelly device), go to: Left sidebar >> **Settings** >> **Outbound WebSocket**;
3. Make sure box **Enable Outbound WebSocket** is selected;
4. In Server field, enter ws://`Your_Home_Assistant_local_IP_address:Port`/api/shelly/ws (note: port must match your HA port when you open HA UI);
5. You *might* have to tweak the **Connection Type**, depending on your local TLS certificate situation;
6. Click **Apply** to save the settings;
7. Reboot the Shelly device.


<div class="note">It is recommended that all your Shelly devices' time settings (NTP server, time zone, and DST) be consistent with those of your Home Assistant host and your network.</div>


## Bluetooth Support

Shelly generation 2 devices running firmware 0.12 or later can act as a Bluetooth proxy for advertisements. Active or passive listening can be enabled in the options flow.

{% include integrations/option_flow.md %}

## Entity naming (generation 1)

The integration uses `Device Name` to name its entities if the device has only one relay or no relays at all.

The integration uses the following strategy to name its entities if the device has more than one relay:

- If `Device Name` or `Channel Name` is set in the device, the integration will use them to generate the entities' name.
- If channel names are set, they will be used in the entity names. The device name will not be used.
- If only the device name is set, and the device has multiple channels, the channel number will be appended to the entity name (e.g., Channel 2).
- In case device name and channel names are not set, the entity name will be generated by the `Device Type`, `Device ID` and `Channel Number`.

Examples:

| Device Name | Channel Name   | Entity Name                     |
| ----------- | -------------- | ------------------------------- |
| `Not set`   | `Not Set`      | shellyswitch25-ABC123 Channel 1 |
| `Not set`   | Kids Room Bulb | Kids Room Bulb                  |
| Kitchen     | `Not Set`      | Kitchen Channel 1               |
| Bedroom     | Round Bulb     | Round Bulb                      |

Names are set from the device web page:

- Device name can be set in **Settings** >> **DEVICE NAME**
- Channel name for single-channel devices can be set in **Settings** >> **CHANNEL NAME**
- Channel name for multi-channel devices can be set in **Settings** >> **CHANNEL NAME** after selecting the channel, by clicking on the channel name.

## Entity naming (generation 2)

The integration uses the following strategy to name its entities:

- If `Channel Name` is set in the device, the integration will use it to generate the entities' name, e.g. `Kitchen Light`
- If `Channel Name` is set to the default value, the integration will use the `Device ID` and default channel name to generate the entities' name, e.g. `ShellyPro4PM-9808D1D8B912 switch_0`.

## Binary input sensors

### Binary input sensors (generation 1)

Depending on how a device's button type is configured, the integration will create binary sensors corresponding to those inputs. binary sensors are not created when the button type is `momentary` or `momentary_on_release`, for these types you need to use events for your automations.

### Binary input sensors (generation 2)

For generation 2 hardware it's possible to select if a device's input is connected to a button or a switch. Binary sensors are created only if the input mode is set to `switch`. When the input is of type `button` you need to use events for your automations.

## Events

If the **BUTTON TYPE** of the switch connected to the device is set to `momentary` or `detached switch`, integration fires events under the type `shelly.click` when the switch is used. You can use these events in your automations.

Also, some devices do not add an entity for the button/switch. For example, the Shelly Button1 has only one entity for the battery level. It does not have an entity for the button itself. To trigger automations based on button presses, use the `shelly.click` event.

### Listening for events

You can subscribe to the `shelly.click` event type in [Developer Tools/Events](/docs/tools/dev-tools/) in order to examine the event data JSON for the correct parameters to use in your automations. For example, `shelly.click` returns event data JSON similar to the following when you press the Shelly Button1.

```json
Event 0 fired 9:53 AM:
{
    "event_type": "shelly.click",
    "data": {
        "device_id": "e09c64a22553484d804353ef97f6fcd6",
        "device": "shellybutton1-A4C12A45174",
        "channel": 1,
        "click_type": "single",
        "generation": 1
    },
    "origin": "LOCAL",
    "time_fired": "2021-04-28T08:53:12.755729+00:00",
    "context": {
        "id": "e0f379706563aaa0c2c1fda5174b5a0e",
        "parent_id": null,
        "user_id": null
    }
}
```

The `generation` value indicates the generation of the device that is the source of the event.

### Automations

The simplest way to create automations is to use the Home Assistant automation editor. For example, to set an automation triggered by a double press of a particular Shelly Button1:

1. In the Triggers section of the automation, set Trigger Type to `Device`.
2. In the Device dropdown menu. find the Shelly Button1.
3. In the Trigger dropdown menu, select `Button double clicked`.
4. Set any conditions and actions to complete your automation.

You can also create automations using YAML, for example:

```yaml
- alias: "Toggle living room light"
  trigger:
    platform: event
    event_type: shelly.click
    event_data:
      device: shellyswitch25-AABBCC
      channel: 1
      click_type: single
  action:
    service: light.toggle
    target:
      entity_id: light.living_room

- alias: "Toggle living room lamp"
  trigger:
    platform: event
    event_type: shelly.click
    event_data:
      device: shellyswitch25-AABBCC
      channel: 2
      click_type: long
  action:
    service: light.toggle
    target:
      entity_id: light.lamp_living_room
```

### Possible values for `click_type`

| Shelly input event | Click Type    |
| ------------------ | ------------- |
| `S`                | `single`      |
| `SS`               | `double`      |
| `SSS`              | `triple`      |
| `L`                | `long`        |
| `SL`               | `single_long` |
| `LS`               | `long_single` |

Generation 2 devices use the values `btn_down`, `btn_up`, `single_push`, `double_push`, `triple_push` and `long_push` as `click_type`.

<div class="note">

Not all devices support all input events. You can check on [Shelly API Reference](https://shelly-api-docs.shelly.cloud/) website what types of Shelly input events your device supports.

</div>

## Appliance type (generation 1)

Shelly device relays are added to Home Assistant by default as `switch` entities. A relay can be added as a `light` entity if the device uses firmware version 1.9.0 or newer and the **Settings** >> **APPLIANCE TYPE** value is set to `light`.

## Consumption type (generation 2)

Shelly device relays are added to Home Assistant by default as `switch` entities. A relay can be added as a `light` entity if **EXTERNAL CONSUMPTION TYPE** value is set to `light`.

<div class="note">

Firmware 1.0.0 or later is required.

</div>

## Light transition

Shelly lights supporting light transition:

- Shelly Bulb RGBW
- Shelly DUO
- Shelly Dimmer
- Shelly Dimmer 2
- Shelly RGBW2
- Shelly Vintage

<div class="note">

Firmware 1.11 or later is required.

</div>

<div class="note">

The firmware limits the transition time to 5 seconds.

</div>

## Device services

The integration offers device services which can be triggered by a configuration button.

### OTA update

Trigger device OTA firmware update.

#### Buttons

- OTA Update
  - triggers the OTA update process for latest stable version
- OTA Update Beta (_disabled by default_)
  - triggers the OTA update process for latest beta version

### Reboot

Trigger reboot of device.

#### Buttons

- Reboot
  - triggers the reboot

## Shelly Thermostatic Radiator Valve (TRV)

Shelly TRV generates 2 entities that can be used to control the device behavior: `climate` and `number`.
The first will allow specifying a temperature, the second instead of a percentage of the valve position.

**Note**: that if you change the valve position then automatic temperature control
 will be disabled.
As soon as you change the temperature, it gets enabled again.

## CoAP port (generation 1)

In some cases, it may be needed to customize the CoAP UDP port (default: `5683`) your Home Assistant instance is listening to.

In order to change it, add the following key to your `configuration.yaml`:

```yaml
# Example configuration.yaml entry
shelly:
  coap_port: 12345
```

## Additional info

Shelly devices rely on [SNTP](https://en.wikipedia.org/wiki/Network_Time_Protocol#SNTP) for features like power measurement.
Please check from the device Web UI that the configured server is reachable.

## Known issues and limitations

- Generation 1 "Shelly 4Pro" and "Shelly Sense", *based on the old CoAP v1 protocol*, are **not** supported.
- Only supports firmware 1.8 and later for generation 1 devices
- Only supports firmware 0.8 and later for generation 2 devices
- Before set up, battery-powered devices must be woken up by pressing the button on the device.
- OTA update service does not support battery-powered devices
- Frequency sensors for generation 2 energy monitoring devices are supported by firmware 1.0.0 beta 6 or later.

### Troubleshooting first generation Shelly devices raising a HA repair issue

The following ideas might help you diagnose and fix the problem of the gen. 1 Shelly device CoIoT push updates not propagating to HA, and causing HA to display a repair issue:

- Check that communication on `UDP` port `5683` is propagating from your Shelly device to Home Assistant. This can be affected when the HA is behind a firewall (such as one running on HA's virtual machine host) or in a different subnet or VLAN than Shelly devices. Connect a computer to the same WiFi SSID at the same location / access point as the affected Shelly device(s) and try:
  - On Windows command line: `portqry.exe -n Your_Home_Assistant_local_IP_address -p udp -e 5683 -sp 5683` This tool is available at https://www.microsoft.com/en-us/download/details.aspx?id=17148 or its GUI version PortQryUI at https://www.microsoft.com/en-us/download/details.aspx?id=24009&wa=wsignin1.0
  - On Linux: `nc -vz -u Your_Home_Assistant_local_IP_address 5683`
- If this is the issue, enabling this communication depends on your netrwork hardware and configuration, and can include port forwarding or opening `UDP` port `5683` on the firewall, or creating other routing rules.
- Check WiFi connection quality. In the device's web UI, go to **Settings** >> **DEVICE INFO**. Confirm the proper SSID name and signal strength; if device reports WiFi RSSI of -70 dBm or a greater negative value, signal strength may be the issue. You can test this hypothesis by temporarily relocating the affected Shelly device(s) an/or their WiFi access point(s) to be closer together and/or with fewer metal obstacles between them, so that you get the Shelly device(s) to report the WiFi RSSI in the -40s...low -50s dBm range. If the issue goes away then, one or more of the following measures may help:
  - Optimize WiFi access point placement to boost the worst affected devices' Wi-Fi signal, or adding another WiFi access point.
  - If using a WiFi network with multiple access points, in the Shelly device's web UI, enable **Internet & Security** >> **WiFi Client AP Roaming** option.
  - Minimize metal obstructions (includig wires) in the immediate vicinity of WiFi access point and your Shelly device.
- Check that your Shelly devices' time is consistent with your HA server and your router, with the following settings in Shelly device web UI:
  - **Settings** >> **TIME ZONE AND GEO-LOCATION** >> **Local Time zone of the Shelly device**
  - **Settings** >> **TIME ZONE AND GEO-LOCATION** >> **Daylight saving time**
  - **Internet & Security** >> **SNTP Server** (make sure this server is reachable)
- Consider *temporarily* enabling Debug Log in **Settings** >> **DEVICE INFO**, just long enough to capture any current errors the Shelly device is reporting, and then disabling the Debug Log.

<div class="note warning">Leaving the Debug Log enabled for an extended period will age the Shelly device's flash memory, i.e. use up its finite write endurance cycles.</div>

<div class="note">In Home Assistant, you can ignore the repair issue and forgo the recommended CoIoT push updates from gen 1 Shelly devices.</div>
